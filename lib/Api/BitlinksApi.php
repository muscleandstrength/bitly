<?php
/**
 * BitlinksApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Bitly
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitly API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@bitly.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitly\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bitly\ApiException;
use Bitly\Configuration;
use Bitly\HeaderSelector;
use Bitly\ObjectSerializer;

/**
 * BitlinksApi Class Doc Comment
 *
 * @category Class
 * @package  Bitly
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BitlinksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createBitlink
     *
     * Shorten a Link
     *
     * @param  \Bitly\Model\Shorten $shorten shorten (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\ExpectationFailed|\Bitly\Model\UnprocessableEntity|\Bitly\Model\ShortenBitlinkBody|\Bitly\Model\ShortenBitlinkBody|\Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function createBitlink($shorten)
    {
        list($response) = $this->createBitlinkWithHttpInfo($shorten);
        return $response;
    }

    /**
     * Operation createBitlinkWithHttpInfo
     *
     * Shorten a Link
     *
     * @param  \Bitly\Model\Shorten $shorten (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\ExpectationFailed|\Bitly\Model\UnprocessableEntity|\Bitly\Model\ShortenBitlinkBody|\Bitly\Model\ShortenBitlinkBody|\Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBitlinkWithHttpInfo($shorten)
    {
        $request = $this->createBitlinkRequest($shorten);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 417:
                    if ('\Bitly\Model\ExpectationFailed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ExpectationFailed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Bitly\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\ShortenBitlinkBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ShortenBitlinkBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\Bitly\Model\ShortenBitlinkBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ShortenBitlinkBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\ShortenBitlinkBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 417:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ExpectationFailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ShortenBitlinkBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ShortenBitlinkBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBitlinkAsync
     *
     * Shorten a Link
     *
     * @param  \Bitly\Model\Shorten $shorten (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBitlinkAsync($shorten)
    {
        return $this->createBitlinkAsyncWithHttpInfo($shorten)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBitlinkAsyncWithHttpInfo
     *
     * Shorten a Link
     *
     * @param  \Bitly\Model\Shorten $shorten (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBitlinkAsyncWithHttpInfo($shorten)
    {
        $returnType = '\Bitly\Model\ShortenBitlinkBody';
        $request = $this->createBitlinkRequest($shorten);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBitlink'
     *
     * @param  \Bitly\Model\Shorten $shorten (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBitlinkRequest($shorten)
    {
        // verify the required parameter 'shorten' is set
        if ($shorten === null || (is_array($shorten) && count($shorten) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shorten when calling createBitlink'
            );
        }

        $resourcePath = '/shorten';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($shorten)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($shorten));
            } else {
                $httpBody = $shorten;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFullBitlink
     *
     * Create a Bitlink
     *
     * @param  \Bitly\Model\FullShorten $full_shorten full_shorten (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\ExpectationFailed|\Bitly\Model\UnprocessableEntity|\Bitly\Model\BitlinkBody|\Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\InternalError
     */
    public function createFullBitlink($full_shorten)
    {
        list($response) = $this->createFullBitlinkWithHttpInfo($full_shorten);
        return $response;
    }

    /**
     * Operation createFullBitlinkWithHttpInfo
     *
     * Create a Bitlink
     *
     * @param  \Bitly\Model\FullShorten $full_shorten (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\ExpectationFailed|\Bitly\Model\UnprocessableEntity|\Bitly\Model\BitlinkBody|\Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFullBitlinkWithHttpInfo($full_shorten)
    {
        $request = $this->createFullBitlinkRequest($full_shorten);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 417:
                    if ('\Bitly\Model\ExpectationFailed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ExpectationFailed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Bitly\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\BitlinkBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BitlinkBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\BitlinkBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 417:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ExpectationFailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BitlinkBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFullBitlinkAsync
     *
     * Create a Bitlink
     *
     * @param  \Bitly\Model\FullShorten $full_shorten (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFullBitlinkAsync($full_shorten)
    {
        return $this->createFullBitlinkAsyncWithHttpInfo($full_shorten)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFullBitlinkAsyncWithHttpInfo
     *
     * Create a Bitlink
     *
     * @param  \Bitly\Model\FullShorten $full_shorten (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFullBitlinkAsyncWithHttpInfo($full_shorten)
    {
        $returnType = '\Bitly\Model\BitlinkBody';
        $request = $this->createFullBitlinkRequest($full_shorten);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFullBitlink'
     *
     * @param  \Bitly\Model\FullShorten $full_shorten (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFullBitlinkRequest($full_shorten)
    {
        // verify the required parameter 'full_shorten' is set
        if ($full_shorten === null || (is_array($full_shorten) && count($full_shorten) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $full_shorten when calling createFullBitlink'
            );
        }

        $resourcePath = '/bitlinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($full_shorten)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($full_shorten));
            } else {
                $httpBody = $full_shorten;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation expandBitlink
     *
     * Expand a Bitlink
     *
     * @param  \Bitly\Model\ExpandBitlink $expand_bitlink expand_bitlink (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\NotFound|\Bitly\Model\UnprocessableEntity|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ExpandedBitlink|\Bitly\Model\InternalError
     */
    public function expandBitlink($expand_bitlink)
    {
        list($response) = $this->expandBitlinkWithHttpInfo($expand_bitlink);
        return $response;
    }

    /**
     * Operation expandBitlinkWithHttpInfo
     *
     * Expand a Bitlink
     *
     * @param  \Bitly\Model\ExpandBitlink $expand_bitlink (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\NotFound|\Bitly\Model\UnprocessableEntity|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ExpandedBitlink|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function expandBitlinkWithHttpInfo($expand_bitlink)
    {
        $request = $this->expandBitlinkRequest($expand_bitlink);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Bitly\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\ExpandedBitlink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ExpandedBitlink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\ExpandedBitlink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ExpandedBitlink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation expandBitlinkAsync
     *
     * Expand a Bitlink
     *
     * @param  \Bitly\Model\ExpandBitlink $expand_bitlink (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expandBitlinkAsync($expand_bitlink)
    {
        return $this->expandBitlinkAsyncWithHttpInfo($expand_bitlink)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation expandBitlinkAsyncWithHttpInfo
     *
     * Expand a Bitlink
     *
     * @param  \Bitly\Model\ExpandBitlink $expand_bitlink (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expandBitlinkAsyncWithHttpInfo($expand_bitlink)
    {
        $returnType = '\Bitly\Model\ExpandedBitlink';
        $request = $this->expandBitlinkRequest($expand_bitlink);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'expandBitlink'
     *
     * @param  \Bitly\Model\ExpandBitlink $expand_bitlink (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function expandBitlinkRequest($expand_bitlink)
    {
        // verify the required parameter 'expand_bitlink' is set
        if ($expand_bitlink === null || (is_array($expand_bitlink) && count($expand_bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expand_bitlink when calling expandBitlink'
            );
        }

        $resourcePath = '/expand';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($expand_bitlink)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($expand_bitlink));
            } else {
                $httpBody = $expand_bitlink;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBitlink
     *
     * Retrieve a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BitlinkBody|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getBitlink($bitlink)
    {
        list($response) = $this->getBitlinkWithHttpInfo($bitlink);
        return $response;
    }

    /**
     * Operation getBitlinkWithHttpInfo
     *
     * Retrieve a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BitlinkBody|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBitlinkWithHttpInfo($bitlink)
    {
        $request = $this->getBitlinkRequest($bitlink);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\BitlinkBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BitlinkBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\BitlinkBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BitlinkBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBitlinkAsync
     *
     * Retrieve a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBitlinkAsync($bitlink)
    {
        return $this->getBitlinkAsyncWithHttpInfo($bitlink)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBitlinkAsyncWithHttpInfo
     *
     * Retrieve a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBitlinkAsyncWithHttpInfo($bitlink)
    {
        $returnType = '\Bitly\Model\BitlinkBody';
        $request = $this->getBitlinkRequest($bitlink);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBitlink'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBitlinkRequest($bitlink)
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling getBitlink'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBitlinkQRCode
     *
     * Get a QR Code
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $color A color denoted in hexidecimal RGB format (optional)
     * @param  bool $exclude_bitly_logo Removes the Bitly logo from the center of the generated QR image (optional)
     * @param  string $image_format Determines the image format of the returned QR code (optional, default to 'png')
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\BitlinkQR|\Bitly\Model\InternalError
     */
    public function getBitlinkQRCode($bitlink, $color = null, $exclude_bitly_logo = null, $image_format = 'png')
    {
        list($response) = $this->getBitlinkQRCodeWithHttpInfo($bitlink, $color, $exclude_bitly_logo, $image_format);
        return $response;
    }

    /**
     * Operation getBitlinkQRCodeWithHttpInfo
     *
     * Get a QR Code
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $color A color denoted in hexidecimal RGB format (optional)
     * @param  bool $exclude_bitly_logo Removes the Bitly logo from the center of the generated QR image (optional)
     * @param  string $image_format Determines the image format of the returned QR code (optional, default to 'png')
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\BitlinkQR|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBitlinkQRCodeWithHttpInfo($bitlink, $color = null, $exclude_bitly_logo = null, $image_format = 'png')
    {
        $request = $this->getBitlinkQRCodeRequest($bitlink, $color, $exclude_bitly_logo, $image_format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\BitlinkQR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BitlinkQR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\BitlinkQR';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BitlinkQR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBitlinkQRCodeAsync
     *
     * Get a QR Code
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $color A color denoted in hexidecimal RGB format (optional)
     * @param  bool $exclude_bitly_logo Removes the Bitly logo from the center of the generated QR image (optional)
     * @param  string $image_format Determines the image format of the returned QR code (optional, default to 'png')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBitlinkQRCodeAsync($bitlink, $color = null, $exclude_bitly_logo = null, $image_format = 'png')
    {
        return $this->getBitlinkQRCodeAsyncWithHttpInfo($bitlink, $color, $exclude_bitly_logo, $image_format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBitlinkQRCodeAsyncWithHttpInfo
     *
     * Get a QR Code
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $color A color denoted in hexidecimal RGB format (optional)
     * @param  bool $exclude_bitly_logo Removes the Bitly logo from the center of the generated QR image (optional)
     * @param  string $image_format Determines the image format of the returned QR code (optional, default to 'png')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBitlinkQRCodeAsyncWithHttpInfo($bitlink, $color = null, $exclude_bitly_logo = null, $image_format = 'png')
    {
        $returnType = '\Bitly\Model\BitlinkQR';
        $request = $this->getBitlinkQRCodeRequest($bitlink, $color, $exclude_bitly_logo, $image_format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBitlinkQRCode'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $color A color denoted in hexidecimal RGB format (optional)
     * @param  bool $exclude_bitly_logo Removes the Bitly logo from the center of the generated QR image (optional)
     * @param  string $image_format Determines the image format of the returned QR code (optional, default to 'png')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBitlinkQRCodeRequest($bitlink, $color = null, $exclude_bitly_logo = null, $image_format = 'png')
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling getBitlinkQRCode'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}/qr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($color !== null) {
            if('form' === 'form' && is_array($color)) {
                foreach($color as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['color'] = $color;
            }
        }
        // query params
        if ($exclude_bitly_logo !== null) {
            if('form' === 'form' && is_array($exclude_bitly_logo)) {
                foreach($exclude_bitly_logo as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['exclude_bitly_logo'] = $exclude_bitly_logo;
            }
        }
        // query params
        if ($image_format !== null) {
            if('form' === 'form' && is_array($image_format)) {
                foreach($image_format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['image_format'] = $image_format;
            }
        }


        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBitlinksByGroup
     *
     * Retrieve Bitlinks by Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  int $page Integer specifying the numbered result at which to start (optional, default to 1)
     * @param  string $keyword Custom keyword to filter on history entries (optional)
     * @param  string $query the value that you would like to search (optional)
     * @param  int $created_before Timestamp as an integer unix epoch (optional)
     * @param  int $created_after Timestamp as an integer unix epoch (optional)
     * @param  int $modified_after Timestamp as an integer unix epoch (optional)
     * @param  string $archived Whether or not to include archived bitlinks (optional, default to 'off')
     * @param  string $deeplinks Filter to only Bitlinks that contain deeplinks (optional, default to 'both')
     * @param  string $domain_deeplinks Filter to only Bitlinks that contain deeplinks configured with a custom domain (optional, default to 'both')
     * @param  string $campaign_guid Filter to return only links for the given campaign GUID, can be provided (optional)
     * @param  string $channel_guid Filter to return only links for the given channel GUID, can be provided, overrides all other parameters (optional)
     * @param  string $custom_bitlink custom_bitlink (optional, default to 'both')
     * @param  string[] $tags filter by given tags (optional)
     * @param  string[] $launchpad_ids filter by launchpad id (optional)
     * @param  string[] $encoding_login Filter by the login of the authenticated user that created the Bitlink (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\Bitlinks|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getBitlinksByGroup($group_guid, $size = 50, $page = 1, $keyword = null, $query = null, $created_before = null, $created_after = null, $modified_after = null, $archived = 'off', $deeplinks = 'both', $domain_deeplinks = 'both', $campaign_guid = null, $channel_guid = null, $custom_bitlink = 'both', $tags = null, $launchpad_ids = null, $encoding_login = null)
    {
        list($response) = $this->getBitlinksByGroupWithHttpInfo($group_guid, $size, $page, $keyword, $query, $created_before, $created_after, $modified_after, $archived, $deeplinks, $domain_deeplinks, $campaign_guid, $channel_guid, $custom_bitlink, $tags, $launchpad_ids, $encoding_login);
        return $response;
    }

    /**
     * Operation getBitlinksByGroupWithHttpInfo
     *
     * Retrieve Bitlinks by Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  int $page Integer specifying the numbered result at which to start (optional, default to 1)
     * @param  string $keyword Custom keyword to filter on history entries (optional)
     * @param  string $query the value that you would like to search (optional)
     * @param  int $created_before Timestamp as an integer unix epoch (optional)
     * @param  int $created_after Timestamp as an integer unix epoch (optional)
     * @param  int $modified_after Timestamp as an integer unix epoch (optional)
     * @param  string $archived Whether or not to include archived bitlinks (optional, default to 'off')
     * @param  string $deeplinks Filter to only Bitlinks that contain deeplinks (optional, default to 'both')
     * @param  string $domain_deeplinks Filter to only Bitlinks that contain deeplinks configured with a custom domain (optional, default to 'both')
     * @param  string $campaign_guid Filter to return only links for the given campaign GUID, can be provided (optional)
     * @param  string $channel_guid Filter to return only links for the given channel GUID, can be provided, overrides all other parameters (optional)
     * @param  string $custom_bitlink (optional, default to 'both')
     * @param  string[] $tags filter by given tags (optional)
     * @param  string[] $launchpad_ids filter by launchpad id (optional)
     * @param  string[] $encoding_login Filter by the login of the authenticated user that created the Bitlink (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\Bitlinks|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBitlinksByGroupWithHttpInfo($group_guid, $size = 50, $page = 1, $keyword = null, $query = null, $created_before = null, $created_after = null, $modified_after = null, $archived = 'off', $deeplinks = 'both', $domain_deeplinks = 'both', $campaign_guid = null, $channel_guid = null, $custom_bitlink = 'both', $tags = null, $launchpad_ids = null, $encoding_login = null)
    {
        $request = $this->getBitlinksByGroupRequest($group_guid, $size, $page, $keyword, $query, $created_before, $created_after, $modified_after, $archived, $deeplinks, $domain_deeplinks, $campaign_guid, $channel_guid, $custom_bitlink, $tags, $launchpad_ids, $encoding_login);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\Bitlinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Bitlinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\Bitlinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Bitlinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBitlinksByGroupAsync
     *
     * Retrieve Bitlinks by Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  int $page Integer specifying the numbered result at which to start (optional, default to 1)
     * @param  string $keyword Custom keyword to filter on history entries (optional)
     * @param  string $query the value that you would like to search (optional)
     * @param  int $created_before Timestamp as an integer unix epoch (optional)
     * @param  int $created_after Timestamp as an integer unix epoch (optional)
     * @param  int $modified_after Timestamp as an integer unix epoch (optional)
     * @param  string $archived Whether or not to include archived bitlinks (optional, default to 'off')
     * @param  string $deeplinks Filter to only Bitlinks that contain deeplinks (optional, default to 'both')
     * @param  string $domain_deeplinks Filter to only Bitlinks that contain deeplinks configured with a custom domain (optional, default to 'both')
     * @param  string $campaign_guid Filter to return only links for the given campaign GUID, can be provided (optional)
     * @param  string $channel_guid Filter to return only links for the given channel GUID, can be provided, overrides all other parameters (optional)
     * @param  string $custom_bitlink (optional, default to 'both')
     * @param  string[] $tags filter by given tags (optional)
     * @param  string[] $launchpad_ids filter by launchpad id (optional)
     * @param  string[] $encoding_login Filter by the login of the authenticated user that created the Bitlink (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBitlinksByGroupAsync($group_guid, $size = 50, $page = 1, $keyword = null, $query = null, $created_before = null, $created_after = null, $modified_after = null, $archived = 'off', $deeplinks = 'both', $domain_deeplinks = 'both', $campaign_guid = null, $channel_guid = null, $custom_bitlink = 'both', $tags = null, $launchpad_ids = null, $encoding_login = null)
    {
        return $this->getBitlinksByGroupAsyncWithHttpInfo($group_guid, $size, $page, $keyword, $query, $created_before, $created_after, $modified_after, $archived, $deeplinks, $domain_deeplinks, $campaign_guid, $channel_guid, $custom_bitlink, $tags, $launchpad_ids, $encoding_login)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBitlinksByGroupAsyncWithHttpInfo
     *
     * Retrieve Bitlinks by Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  int $page Integer specifying the numbered result at which to start (optional, default to 1)
     * @param  string $keyword Custom keyword to filter on history entries (optional)
     * @param  string $query the value that you would like to search (optional)
     * @param  int $created_before Timestamp as an integer unix epoch (optional)
     * @param  int $created_after Timestamp as an integer unix epoch (optional)
     * @param  int $modified_after Timestamp as an integer unix epoch (optional)
     * @param  string $archived Whether or not to include archived bitlinks (optional, default to 'off')
     * @param  string $deeplinks Filter to only Bitlinks that contain deeplinks (optional, default to 'both')
     * @param  string $domain_deeplinks Filter to only Bitlinks that contain deeplinks configured with a custom domain (optional, default to 'both')
     * @param  string $campaign_guid Filter to return only links for the given campaign GUID, can be provided (optional)
     * @param  string $channel_guid Filter to return only links for the given channel GUID, can be provided, overrides all other parameters (optional)
     * @param  string $custom_bitlink (optional, default to 'both')
     * @param  string[] $tags filter by given tags (optional)
     * @param  string[] $launchpad_ids filter by launchpad id (optional)
     * @param  string[] $encoding_login Filter by the login of the authenticated user that created the Bitlink (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBitlinksByGroupAsyncWithHttpInfo($group_guid, $size = 50, $page = 1, $keyword = null, $query = null, $created_before = null, $created_after = null, $modified_after = null, $archived = 'off', $deeplinks = 'both', $domain_deeplinks = 'both', $campaign_guid = null, $channel_guid = null, $custom_bitlink = 'both', $tags = null, $launchpad_ids = null, $encoding_login = null)
    {
        $returnType = '\Bitly\Model\Bitlinks';
        $request = $this->getBitlinksByGroupRequest($group_guid, $size, $page, $keyword, $query, $created_before, $created_after, $modified_after, $archived, $deeplinks, $domain_deeplinks, $campaign_guid, $channel_guid, $custom_bitlink, $tags, $launchpad_ids, $encoding_login);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBitlinksByGroup'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  int $page Integer specifying the numbered result at which to start (optional, default to 1)
     * @param  string $keyword Custom keyword to filter on history entries (optional)
     * @param  string $query the value that you would like to search (optional)
     * @param  int $created_before Timestamp as an integer unix epoch (optional)
     * @param  int $created_after Timestamp as an integer unix epoch (optional)
     * @param  int $modified_after Timestamp as an integer unix epoch (optional)
     * @param  string $archived Whether or not to include archived bitlinks (optional, default to 'off')
     * @param  string $deeplinks Filter to only Bitlinks that contain deeplinks (optional, default to 'both')
     * @param  string $domain_deeplinks Filter to only Bitlinks that contain deeplinks configured with a custom domain (optional, default to 'both')
     * @param  string $campaign_guid Filter to return only links for the given campaign GUID, can be provided (optional)
     * @param  string $channel_guid Filter to return only links for the given channel GUID, can be provided, overrides all other parameters (optional)
     * @param  string $custom_bitlink (optional, default to 'both')
     * @param  string[] $tags filter by given tags (optional)
     * @param  string[] $launchpad_ids filter by launchpad id (optional)
     * @param  string[] $encoding_login Filter by the login of the authenticated user that created the Bitlink (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBitlinksByGroupRequest($group_guid, $size = 50, $page = 1, $keyword = null, $query = null, $created_before = null, $created_after = null, $modified_after = null, $archived = 'off', $deeplinks = 'both', $domain_deeplinks = 'both', $campaign_guid = null, $channel_guid = null, $custom_bitlink = 'both', $tags = null, $launchpad_ids = null, $encoding_login = null)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getBitlinksByGroup'
            );
        }

        $resourcePath = '/groups/{group_guid}/bitlinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($keyword !== null) {
            if('form' === 'form' && is_array($keyword)) {
                foreach($keyword as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyword'] = $keyword;
            }
        }
        // query params
        if ($query !== null) {
            if('form' === 'form' && is_array($query)) {
                foreach($query as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['query'] = $query;
            }
        }
        // query params
        if ($created_before !== null) {
            if('form' === 'form' && is_array($created_before)) {
                foreach($created_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['created_before'] = $created_before;
            }
        }
        // query params
        if ($created_after !== null) {
            if('form' === 'form' && is_array($created_after)) {
                foreach($created_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['created_after'] = $created_after;
            }
        }
        // query params
        if ($modified_after !== null) {
            if('form' === 'form' && is_array($modified_after)) {
                foreach($modified_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modified_after'] = $modified_after;
            }
        }
        // query params
        if ($archived !== null) {
            if('form' === 'form' && is_array($archived)) {
                foreach($archived as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['archived'] = $archived;
            }
        }
        // query params
        if ($deeplinks !== null) {
            if('form' === 'form' && is_array($deeplinks)) {
                foreach($deeplinks as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deeplinks'] = $deeplinks;
            }
        }
        // query params
        if ($domain_deeplinks !== null) {
            if('form' === 'form' && is_array($domain_deeplinks)) {
                foreach($domain_deeplinks as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['domain_deeplinks'] = $domain_deeplinks;
            }
        }
        // query params
        if ($campaign_guid !== null) {
            if('form' === 'form' && is_array($campaign_guid)) {
                foreach($campaign_guid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['campaign_guid'] = $campaign_guid;
            }
        }
        // query params
        if ($channel_guid !== null) {
            if('form' === 'form' && is_array($channel_guid)) {
                foreach($channel_guid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['channel_guid'] = $channel_guid;
            }
        }
        // query params
        if ($custom_bitlink !== null) {
            if('form' === 'form' && is_array($custom_bitlink)) {
                foreach($custom_bitlink as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['custom_bitlink'] = $custom_bitlink;
            }
        }
        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($launchpad_ids !== null) {
            if('form' === 'form' && is_array($launchpad_ids)) {
                foreach($launchpad_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['launchpad_ids'] = $launchpad_ids;
            }
        }
        // query params
        if ($encoding_login !== null) {
            if('form' === 'form' && is_array($encoding_login)) {
                foreach($encoding_login as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['encoding_login'] = $encoding_login;
            }
        }


        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClicksForBitlink
     *
     * Get Clicks for a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\Clicks|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getClicksForBitlink($bitlink, $unit, $units, $unit_reference = null)
    {
        list($response) = $this->getClicksForBitlinkWithHttpInfo($bitlink, $unit, $units, $unit_reference);
        return $response;
    }

    /**
     * Operation getClicksForBitlinkWithHttpInfo
     *
     * Get Clicks for a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\Clicks|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClicksForBitlinkWithHttpInfo($bitlink, $unit, $units, $unit_reference = null)
    {
        $request = $this->getClicksForBitlinkRequest($bitlink, $unit, $units, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\Clicks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Clicks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\Clicks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Clicks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClicksForBitlinkAsync
     *
     * Get Clicks for a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClicksForBitlinkAsync($bitlink, $unit, $units, $unit_reference = null)
    {
        return $this->getClicksForBitlinkAsyncWithHttpInfo($bitlink, $unit, $units, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClicksForBitlinkAsyncWithHttpInfo
     *
     * Get Clicks for a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClicksForBitlinkAsyncWithHttpInfo($bitlink, $unit, $units, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\Clicks';
        $request = $this->getClicksForBitlinkRequest($bitlink, $unit, $units, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClicksForBitlink'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClicksForBitlinkRequest($bitlink, $unit, $units, $unit_reference = null)
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling getClicksForBitlink'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getClicksForBitlink'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getClicksForBitlink'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}/clicks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClicksSummaryForBitlink
     *
     * Get a Clicks Summary for a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\ClicksSummary|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getClicksSummaryForBitlink($bitlink, $unit, $units, $unit_reference = null)
    {
        list($response) = $this->getClicksSummaryForBitlinkWithHttpInfo($bitlink, $unit, $units, $unit_reference);
        return $response;
    }

    /**
     * Operation getClicksSummaryForBitlinkWithHttpInfo
     *
     * Get a Clicks Summary for a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\ClicksSummary|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClicksSummaryForBitlinkWithHttpInfo($bitlink, $unit, $units, $unit_reference = null)
    {
        $request = $this->getClicksSummaryForBitlinkRequest($bitlink, $unit, $units, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\ClicksSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ClicksSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\ClicksSummary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ClicksSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClicksSummaryForBitlinkAsync
     *
     * Get a Clicks Summary for a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClicksSummaryForBitlinkAsync($bitlink, $unit, $units, $unit_reference = null)
    {
        return $this->getClicksSummaryForBitlinkAsyncWithHttpInfo($bitlink, $unit, $units, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClicksSummaryForBitlinkAsyncWithHttpInfo
     *
     * Get a Clicks Summary for a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClicksSummaryForBitlinkAsyncWithHttpInfo($bitlink, $unit, $units, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\ClicksSummary';
        $request = $this->getClicksSummaryForBitlinkRequest($bitlink, $unit, $units, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClicksSummaryForBitlink'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClicksSummaryForBitlinkRequest($bitlink, $unit, $units, $unit_reference = null)
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling getClicksSummaryForBitlink'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getClicksSummaryForBitlink'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getClicksSummaryForBitlink'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}/clicks/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMetricsForBitlinkByCities
     *
     * Get Metrics for a Bitlink by City
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\CityMetrics|\Bitly\Model\InternalError
     */
    public function getMetricsForBitlinkByCities($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        list($response) = $this->getMetricsForBitlinkByCitiesWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference);
        return $response;
    }

    /**
     * Operation getMetricsForBitlinkByCitiesWithHttpInfo
     *
     * Get Metrics for a Bitlink by City
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\CityMetrics|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMetricsForBitlinkByCitiesWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $request = $this->getMetricsForBitlinkByCitiesRequest($bitlink, $unit, $units, $size, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\CityMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\CityMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\CityMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\CityMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMetricsForBitlinkByCitiesAsync
     *
     * Get Metrics for a Bitlink by City
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByCitiesAsync($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        return $this->getMetricsForBitlinkByCitiesAsyncWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMetricsForBitlinkByCitiesAsyncWithHttpInfo
     *
     * Get Metrics for a Bitlink by City
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByCitiesAsyncWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\CityMetrics';
        $request = $this->getMetricsForBitlinkByCitiesRequest($bitlink, $unit, $units, $size, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMetricsForBitlinkByCities'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMetricsForBitlinkByCitiesRequest($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling getMetricsForBitlinkByCities'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getMetricsForBitlinkByCities'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getMetricsForBitlinkByCities'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}/cities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMetricsForBitlinkByCountries
     *
     * Get Metrics for a Bitlink by Country
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ClickMetrics|\Bitly\Model\InternalError
     */
    public function getMetricsForBitlinkByCountries($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        list($response) = $this->getMetricsForBitlinkByCountriesWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference);
        return $response;
    }

    /**
     * Operation getMetricsForBitlinkByCountriesWithHttpInfo
     *
     * Get Metrics for a Bitlink by Country
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ClickMetrics|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMetricsForBitlinkByCountriesWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $request = $this->getMetricsForBitlinkByCountriesRequest($bitlink, $unit, $units, $size, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\ClickMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ClickMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\ClickMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ClickMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMetricsForBitlinkByCountriesAsync
     *
     * Get Metrics for a Bitlink by Country
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByCountriesAsync($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        return $this->getMetricsForBitlinkByCountriesAsyncWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMetricsForBitlinkByCountriesAsyncWithHttpInfo
     *
     * Get Metrics for a Bitlink by Country
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByCountriesAsyncWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\ClickMetrics';
        $request = $this->getMetricsForBitlinkByCountriesRequest($bitlink, $unit, $units, $size, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMetricsForBitlinkByCountries'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMetricsForBitlinkByCountriesRequest($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling getMetricsForBitlinkByCountries'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getMetricsForBitlinkByCountries'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getMetricsForBitlinkByCountries'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMetricsForBitlinkByDevices
     *
     * Get Metrics for a Bitlink by Device Type
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\DeviceMetrics|\Bitly\Model\InternalError
     */
    public function getMetricsForBitlinkByDevices($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        list($response) = $this->getMetricsForBitlinkByDevicesWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference);
        return $response;
    }

    /**
     * Operation getMetricsForBitlinkByDevicesWithHttpInfo
     *
     * Get Metrics for a Bitlink by Device Type
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\DeviceMetrics|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMetricsForBitlinkByDevicesWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $request = $this->getMetricsForBitlinkByDevicesRequest($bitlink, $unit, $units, $size, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\DeviceMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\DeviceMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\DeviceMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\DeviceMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMetricsForBitlinkByDevicesAsync
     *
     * Get Metrics for a Bitlink by Device Type
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByDevicesAsync($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        return $this->getMetricsForBitlinkByDevicesAsyncWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMetricsForBitlinkByDevicesAsyncWithHttpInfo
     *
     * Get Metrics for a Bitlink by Device Type
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByDevicesAsyncWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\DeviceMetrics';
        $request = $this->getMetricsForBitlinkByDevicesRequest($bitlink, $unit, $units, $size, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMetricsForBitlinkByDevices'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMetricsForBitlinkByDevicesRequest($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling getMetricsForBitlinkByDevices'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getMetricsForBitlinkByDevices'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getMetricsForBitlinkByDevices'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}/devices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMetricsForBitlinkByReferrers
     *
     * Get Metrics for a Bitlink by Referrers
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ClickMetrics|\Bitly\Model\InternalError
     */
    public function getMetricsForBitlinkByReferrers($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        list($response) = $this->getMetricsForBitlinkByReferrersWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference);
        return $response;
    }

    /**
     * Operation getMetricsForBitlinkByReferrersWithHttpInfo
     *
     * Get Metrics for a Bitlink by Referrers
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ClickMetrics|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMetricsForBitlinkByReferrersWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $request = $this->getMetricsForBitlinkByReferrersRequest($bitlink, $unit, $units, $size, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\ClickMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ClickMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\ClickMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ClickMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMetricsForBitlinkByReferrersAsync
     *
     * Get Metrics for a Bitlink by Referrers
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByReferrersAsync($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        return $this->getMetricsForBitlinkByReferrersAsyncWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMetricsForBitlinkByReferrersAsyncWithHttpInfo
     *
     * Get Metrics for a Bitlink by Referrers
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByReferrersAsyncWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\ClickMetrics';
        $request = $this->getMetricsForBitlinkByReferrersRequest($bitlink, $unit, $units, $size, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMetricsForBitlinkByReferrers'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMetricsForBitlinkByReferrersRequest($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling getMetricsForBitlinkByReferrers'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getMetricsForBitlinkByReferrers'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getMetricsForBitlinkByReferrers'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}/referrers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMetricsForBitlinkByReferrersByDomains
     *
     * Get Metrics for a Bitlink by Referrers by Domain
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ReferrersByDomains|\Bitly\Model\InternalError
     */
    public function getMetricsForBitlinkByReferrersByDomains($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        list($response) = $this->getMetricsForBitlinkByReferrersByDomainsWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference);
        return $response;
    }

    /**
     * Operation getMetricsForBitlinkByReferrersByDomainsWithHttpInfo
     *
     * Get Metrics for a Bitlink by Referrers by Domain
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ReferrersByDomains|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMetricsForBitlinkByReferrersByDomainsWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $request = $this->getMetricsForBitlinkByReferrersByDomainsRequest($bitlink, $unit, $units, $size, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\ReferrersByDomains' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ReferrersByDomains', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\ReferrersByDomains';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ReferrersByDomains',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMetricsForBitlinkByReferrersByDomainsAsync
     *
     * Get Metrics for a Bitlink by Referrers by Domain
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByReferrersByDomainsAsync($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        return $this->getMetricsForBitlinkByReferrersByDomainsAsyncWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMetricsForBitlinkByReferrersByDomainsAsyncWithHttpInfo
     *
     * Get Metrics for a Bitlink by Referrers by Domain
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByReferrersByDomainsAsyncWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\ReferrersByDomains';
        $request = $this->getMetricsForBitlinkByReferrersByDomainsRequest($bitlink, $unit, $units, $size, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMetricsForBitlinkByReferrersByDomains'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMetricsForBitlinkByReferrersByDomainsRequest($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling getMetricsForBitlinkByReferrersByDomains'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getMetricsForBitlinkByReferrersByDomains'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getMetricsForBitlinkByReferrersByDomains'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}/referrers_by_domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMetricsForBitlinkByReferringDomains
     *
     * Get Metrics for a Bitlink by Referring Domains
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ClickMetrics|\Bitly\Model\InternalError
     */
    public function getMetricsForBitlinkByReferringDomains($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        list($response) = $this->getMetricsForBitlinkByReferringDomainsWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference);
        return $response;
    }

    /**
     * Operation getMetricsForBitlinkByReferringDomainsWithHttpInfo
     *
     * Get Metrics for a Bitlink by Referring Domains
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ClickMetrics|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMetricsForBitlinkByReferringDomainsWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $request = $this->getMetricsForBitlinkByReferringDomainsRequest($bitlink, $unit, $units, $size, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\ClickMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ClickMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\ClickMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ClickMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMetricsForBitlinkByReferringDomainsAsync
     *
     * Get Metrics for a Bitlink by Referring Domains
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByReferringDomainsAsync($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        return $this->getMetricsForBitlinkByReferringDomainsAsyncWithHttpInfo($bitlink, $unit, $units, $size, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMetricsForBitlinkByReferringDomainsAsyncWithHttpInfo
     *
     * Get Metrics for a Bitlink by Referring Domains
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetricsForBitlinkByReferringDomainsAsyncWithHttpInfo($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\ClickMetrics';
        $request = $this->getMetricsForBitlinkByReferringDomainsRequest($bitlink, $unit, $units, $size, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMetricsForBitlinkByReferringDomains'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMetricsForBitlinkByReferringDomainsRequest($bitlink, $unit, $units, $size = 50, $unit_reference = null)
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling getMetricsForBitlinkByReferringDomains'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getMetricsForBitlinkByReferringDomains'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getMetricsForBitlinkByReferringDomains'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}/referring_domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSortedBitlinks
     *
     * Retrieve Sorted Bitlinks for Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $sort The type of sorting that you would like to do (required)
     * @param  string $unit A unit of time (optional, default to 'day')
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (optional, default to -1)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\SortedLinks|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getSortedBitlinks($group_guid, $sort, $unit = 'day', $units = -1, $unit_reference = null, $size = 50)
    {
        list($response) = $this->getSortedBitlinksWithHttpInfo($group_guid, $sort, $unit, $units, $unit_reference, $size);
        return $response;
    }

    /**
     * Operation getSortedBitlinksWithHttpInfo
     *
     * Retrieve Sorted Bitlinks for Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $sort The type of sorting that you would like to do (required)
     * @param  string $unit A unit of time (optional, default to 'day')
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (optional, default to -1)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\SortedLinks|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSortedBitlinksWithHttpInfo($group_guid, $sort, $unit = 'day', $units = -1, $unit_reference = null, $size = 50)
    {
        $request = $this->getSortedBitlinksRequest($group_guid, $sort, $unit, $units, $unit_reference, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\SortedLinks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\SortedLinks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\SortedLinks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\SortedLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSortedBitlinksAsync
     *
     * Retrieve Sorted Bitlinks for Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $sort The type of sorting that you would like to do (required)
     * @param  string $unit A unit of time (optional, default to 'day')
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (optional, default to -1)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSortedBitlinksAsync($group_guid, $sort, $unit = 'day', $units = -1, $unit_reference = null, $size = 50)
    {
        return $this->getSortedBitlinksAsyncWithHttpInfo($group_guid, $sort, $unit, $units, $unit_reference, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSortedBitlinksAsyncWithHttpInfo
     *
     * Retrieve Sorted Bitlinks for Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $sort The type of sorting that you would like to do (required)
     * @param  string $unit A unit of time (optional, default to 'day')
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (optional, default to -1)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSortedBitlinksAsyncWithHttpInfo($group_guid, $sort, $unit = 'day', $units = -1, $unit_reference = null, $size = 50)
    {
        $returnType = '\Bitly\Model\SortedLinks';
        $request = $this->getSortedBitlinksRequest($group_guid, $sort, $unit, $units, $unit_reference, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSortedBitlinks'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $sort The type of sorting that you would like to do (required)
     * @param  string $unit A unit of time (optional, default to 'day')
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (optional, default to -1)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSortedBitlinksRequest($group_guid, $sort, $unit = 'day', $units = -1, $unit_reference = null, $size = 50)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getSortedBitlinks'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling getSortedBitlinks'
            );
        }

        $resourcePath = '/groups/{group_guid}/bitlinks/{sort}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }


        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }
        // path params
        if ($sort !== null) {
            $resourcePath = str_replace(
                '{' . 'sort' . '}',
                ObjectSerializer::toPathValue($sort),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBitlink
     *
     * Update a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  \Bitly\Model\BitlinkBody $bitlink_body bitlink_body (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\UnprocessableEntity|\Bitly\Model\BitlinkBody|\Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\InternalError
     */
    public function updateBitlink($bitlink, $bitlink_body)
    {
        list($response) = $this->updateBitlinkWithHttpInfo($bitlink, $bitlink_body);
        return $response;
    }

    /**
     * Operation updateBitlinkWithHttpInfo
     *
     * Update a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  \Bitly\Model\BitlinkBody $bitlink_body (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\UnprocessableEntity|\Bitly\Model\BitlinkBody|\Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBitlinkWithHttpInfo($bitlink, $bitlink_body)
    {
        $request = $this->updateBitlinkRequest($bitlink, $bitlink_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 422:
                    if ('\Bitly\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\BitlinkBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BitlinkBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\BitlinkBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BitlinkBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBitlinkAsync
     *
     * Update a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  \Bitly\Model\BitlinkBody $bitlink_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBitlinkAsync($bitlink, $bitlink_body)
    {
        return $this->updateBitlinkAsyncWithHttpInfo($bitlink, $bitlink_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBitlinkAsyncWithHttpInfo
     *
     * Update a Bitlink
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  \Bitly\Model\BitlinkBody $bitlink_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBitlinkAsyncWithHttpInfo($bitlink, $bitlink_body)
    {
        $returnType = '\Bitly\Model\BitlinkBody';
        $request = $this->updateBitlinkRequest($bitlink, $bitlink_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBitlink'
     *
     * @param  string $bitlink A Bitlink made of the domain and hash (required)
     * @param  \Bitly\Model\BitlinkBody $bitlink_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateBitlinkRequest($bitlink, $bitlink_body)
    {
        // verify the required parameter 'bitlink' is set
        if ($bitlink === null || (is_array($bitlink) && count($bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink when calling updateBitlink'
            );
        }
        // verify the required parameter 'bitlink_body' is set
        if ($bitlink_body === null || (is_array($bitlink_body) && count($bitlink_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bitlink_body when calling updateBitlink'
            );
        }

        $resourcePath = '/bitlinks/{bitlink}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'bitlink' . '}',
                ObjectSerializer::toPathValue($bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($bitlink_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($bitlink_body));
            } else {
                $httpBody = $bitlink_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBitlinksByGroup
     *
     * Bulk update bitlinks
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\BulkUpdateRequest $bulk_update_request bulk_update_request (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\UnprocessableEntity|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\BulkUpdate|\Bitly\Model\InternalError
     */
    public function updateBitlinksByGroup($group_guid, $bulk_update_request)
    {
        list($response) = $this->updateBitlinksByGroupWithHttpInfo($group_guid, $bulk_update_request);
        return $response;
    }

    /**
     * Operation updateBitlinksByGroupWithHttpInfo
     *
     * Bulk update bitlinks
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\BulkUpdateRequest $bulk_update_request (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\UnprocessableEntity|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\BulkUpdate|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBitlinksByGroupWithHttpInfo($group_guid, $bulk_update_request)
    {
        $request = $this->updateBitlinksByGroupRequest($group_guid, $bulk_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Bitly\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\BulkUpdate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BulkUpdate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\BulkUpdate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BulkUpdate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBitlinksByGroupAsync
     *
     * Bulk update bitlinks
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\BulkUpdateRequest $bulk_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBitlinksByGroupAsync($group_guid, $bulk_update_request)
    {
        return $this->updateBitlinksByGroupAsyncWithHttpInfo($group_guid, $bulk_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBitlinksByGroupAsyncWithHttpInfo
     *
     * Bulk update bitlinks
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\BulkUpdateRequest $bulk_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBitlinksByGroupAsyncWithHttpInfo($group_guid, $bulk_update_request)
    {
        $returnType = '\Bitly\Model\BulkUpdate';
        $request = $this->updateBitlinksByGroupRequest($group_guid, $bulk_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBitlinksByGroup'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\BulkUpdateRequest $bulk_update_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateBitlinksByGroupRequest($group_guid, $bulk_update_request)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling updateBitlinksByGroup'
            );
        }
        // verify the required parameter 'bulk_update_request' is set
        if ($bulk_update_request === null || (is_array($bulk_update_request) && count($bulk_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_update_request when calling updateBitlinksByGroup'
            );
        }

        $resourcePath = '/groups/{group_guid}/bitlinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($bulk_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($bulk_update_request));
            } else {
                $httpBody = $bulk_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
