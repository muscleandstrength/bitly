<?php
/**
 * CustomBitlinksApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Bitly
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitly API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@bitly.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitly\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bitly\ApiException;
use Bitly\Configuration;
use Bitly\HeaderSelector;
use Bitly\ObjectSerializer;

/**
 * CustomBitlinksApi Class Doc Comment
 *
 * @category Class
 * @package  Bitly
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomBitlinksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addCustomBitlink
     *
     * Add Custom Bitlink
     *
     * @param  \Bitly\Model\AddCustomBitlink $add_custom_bitlink add_custom_bitlink (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\Error|\Bitly\Model\UnprocessableEntity|\Bitly\Model\CustomBitlink|\Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\NotFound
     */
    public function addCustomBitlink($add_custom_bitlink)
    {
        list($response) = $this->addCustomBitlinkWithHttpInfo($add_custom_bitlink);
        return $response;
    }

    /**
     * Operation addCustomBitlinkWithHttpInfo
     *
     * Add Custom Bitlink
     *
     * @param  \Bitly\Model\AddCustomBitlink $add_custom_bitlink (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\Error|\Bitly\Model\UnprocessableEntity|\Bitly\Model\CustomBitlink|\Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCustomBitlinkWithHttpInfo($add_custom_bitlink)
    {
        $request = $this->addCustomBitlinkRequest($add_custom_bitlink);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 409:
                    if ('\Bitly\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Bitly\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\CustomBitlink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\CustomBitlink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\CustomBitlink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\CustomBitlink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCustomBitlinkAsync
     *
     * Add Custom Bitlink
     *
     * @param  \Bitly\Model\AddCustomBitlink $add_custom_bitlink (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCustomBitlinkAsync($add_custom_bitlink)
    {
        return $this->addCustomBitlinkAsyncWithHttpInfo($add_custom_bitlink)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCustomBitlinkAsyncWithHttpInfo
     *
     * Add Custom Bitlink
     *
     * @param  \Bitly\Model\AddCustomBitlink $add_custom_bitlink (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCustomBitlinkAsyncWithHttpInfo($add_custom_bitlink)
    {
        $returnType = '\Bitly\Model\CustomBitlink';
        $request = $this->addCustomBitlinkRequest($add_custom_bitlink);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCustomBitlink'
     *
     * @param  \Bitly\Model\AddCustomBitlink $add_custom_bitlink (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCustomBitlinkRequest($add_custom_bitlink)
    {
        // verify the required parameter 'add_custom_bitlink' is set
        if ($add_custom_bitlink === null || (is_array($add_custom_bitlink) && count($add_custom_bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_custom_bitlink when calling addCustomBitlink'
            );
        }

        $resourcePath = '/custom_bitlinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_custom_bitlink)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_custom_bitlink));
            } else {
                $httpBody = $add_custom_bitlink;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClicksForCustomBitlink
     *
     * Get Clicks for a Custom Bitlink&#39;s Entire History
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\Clicks|\Bitly\Model\NotFound
     */
    public function getClicksForCustomBitlink($custom_bitlink, $unit, $units, $unit_reference = null)
    {
        list($response) = $this->getClicksForCustomBitlinkWithHttpInfo($custom_bitlink, $unit, $units, $unit_reference);
        return $response;
    }

    /**
     * Operation getClicksForCustomBitlinkWithHttpInfo
     *
     * Get Clicks for a Custom Bitlink&#39;s Entire History
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\Clicks|\Bitly\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClicksForCustomBitlinkWithHttpInfo($custom_bitlink, $unit, $units, $unit_reference = null)
    {
        $request = $this->getClicksForCustomBitlinkRequest($custom_bitlink, $unit, $units, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\Clicks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Clicks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\Clicks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Clicks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClicksForCustomBitlinkAsync
     *
     * Get Clicks for a Custom Bitlink&#39;s Entire History
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClicksForCustomBitlinkAsync($custom_bitlink, $unit, $units, $unit_reference = null)
    {
        return $this->getClicksForCustomBitlinkAsyncWithHttpInfo($custom_bitlink, $unit, $units, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClicksForCustomBitlinkAsyncWithHttpInfo
     *
     * Get Clicks for a Custom Bitlink&#39;s Entire History
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClicksForCustomBitlinkAsyncWithHttpInfo($custom_bitlink, $unit, $units, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\Clicks';
        $request = $this->getClicksForCustomBitlinkRequest($custom_bitlink, $unit, $units, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClicksForCustomBitlink'
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClicksForCustomBitlinkRequest($custom_bitlink, $unit, $units, $unit_reference = null)
    {
        // verify the required parameter 'custom_bitlink' is set
        if ($custom_bitlink === null || (is_array($custom_bitlink) && count($custom_bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_bitlink when calling getClicksForCustomBitlink'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getClicksForCustomBitlink'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getClicksForCustomBitlink'
            );
        }

        $resourcePath = '/custom_bitlinks/{custom_bitlink}/clicks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($custom_bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'custom_bitlink' . '}',
                ObjectSerializer::toPathValue($custom_bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomBitlink
     *
     * Retrieve Custom Bitlink
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\CustomBitlink|\Bitly\Model\NotFound
     */
    public function getCustomBitlink($custom_bitlink)
    {
        list($response) = $this->getCustomBitlinkWithHttpInfo($custom_bitlink);
        return $response;
    }

    /**
     * Operation getCustomBitlinkWithHttpInfo
     *
     * Retrieve Custom Bitlink
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\CustomBitlink|\Bitly\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomBitlinkWithHttpInfo($custom_bitlink)
    {
        $request = $this->getCustomBitlinkRequest($custom_bitlink);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\CustomBitlink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\CustomBitlink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\CustomBitlink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\CustomBitlink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomBitlinkAsync
     *
     * Retrieve Custom Bitlink
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomBitlinkAsync($custom_bitlink)
    {
        return $this->getCustomBitlinkAsyncWithHttpInfo($custom_bitlink)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomBitlinkAsyncWithHttpInfo
     *
     * Retrieve Custom Bitlink
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomBitlinkAsyncWithHttpInfo($custom_bitlink)
    {
        $returnType = '\Bitly\Model\CustomBitlink';
        $request = $this->getCustomBitlinkRequest($custom_bitlink);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomBitlink'
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomBitlinkRequest($custom_bitlink)
    {
        // verify the required parameter 'custom_bitlink' is set
        if ($custom_bitlink === null || (is_array($custom_bitlink) && count($custom_bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_bitlink when calling getCustomBitlink'
            );
        }

        $resourcePath = '/custom_bitlinks/{custom_bitlink}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($custom_bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'custom_bitlink' . '}',
                ObjectSerializer::toPathValue($custom_bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomBitlinkMetricsByDestination
     *
     * Get Metrics for a Custom Bitlink by Destination
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ClickMetrics|\Bitly\Model\NotFound
     */
    public function getCustomBitlinkMetricsByDestination($custom_bitlink, $unit, $units, $unit_reference = null)
    {
        list($response) = $this->getCustomBitlinkMetricsByDestinationWithHttpInfo($custom_bitlink, $unit, $units, $unit_reference);
        return $response;
    }

    /**
     * Operation getCustomBitlinkMetricsByDestinationWithHttpInfo
     *
     * Get Metrics for a Custom Bitlink by Destination
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\ClickMetrics|\Bitly\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomBitlinkMetricsByDestinationWithHttpInfo($custom_bitlink, $unit, $units, $unit_reference = null)
    {
        $request = $this->getCustomBitlinkMetricsByDestinationRequest($custom_bitlink, $unit, $units, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\ClickMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ClickMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\ClickMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ClickMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomBitlinkMetricsByDestinationAsync
     *
     * Get Metrics for a Custom Bitlink by Destination
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomBitlinkMetricsByDestinationAsync($custom_bitlink, $unit, $units, $unit_reference = null)
    {
        return $this->getCustomBitlinkMetricsByDestinationAsyncWithHttpInfo($custom_bitlink, $unit, $units, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomBitlinkMetricsByDestinationAsyncWithHttpInfo
     *
     * Get Metrics for a Custom Bitlink by Destination
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomBitlinkMetricsByDestinationAsyncWithHttpInfo($custom_bitlink, $unit, $units, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\ClickMetrics';
        $request = $this->getCustomBitlinkMetricsByDestinationRequest($custom_bitlink, $unit, $units, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomBitlinkMetricsByDestination'
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomBitlinkMetricsByDestinationRequest($custom_bitlink, $unit, $units, $unit_reference = null)
    {
        // verify the required parameter 'custom_bitlink' is set
        if ($custom_bitlink === null || (is_array($custom_bitlink) && count($custom_bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_bitlink when calling getCustomBitlinkMetricsByDestination'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getCustomBitlinkMetricsByDestination'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getCustomBitlinkMetricsByDestination'
            );
        }

        $resourcePath = '/custom_bitlinks/{custom_bitlink}/clicks_by_destination';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($custom_bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'custom_bitlink' . '}',
                ObjectSerializer::toPathValue($custom_bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomBitlink
     *
     * Update Custom Bitlink
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  \Bitly\Model\UpdateCustomBitlink $update_custom_bitlink update_custom_bitlink (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\UnprocessableEntity|\Bitly\Model\CustomBitlink|\Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\InternalError
     */
    public function updateCustomBitlink($custom_bitlink, $update_custom_bitlink)
    {
        list($response) = $this->updateCustomBitlinkWithHttpInfo($custom_bitlink, $update_custom_bitlink);
        return $response;
    }

    /**
     * Operation updateCustomBitlinkWithHttpInfo
     *
     * Update Custom Bitlink
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  \Bitly\Model\UpdateCustomBitlink $update_custom_bitlink (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\UnprocessableEntity|\Bitly\Model\CustomBitlink|\Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomBitlinkWithHttpInfo($custom_bitlink, $update_custom_bitlink)
    {
        $request = $this->updateCustomBitlinkRequest($custom_bitlink, $update_custom_bitlink);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 422:
                    if ('\Bitly\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\CustomBitlink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\CustomBitlink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\CustomBitlink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\CustomBitlink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomBitlinkAsync
     *
     * Update Custom Bitlink
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  \Bitly\Model\UpdateCustomBitlink $update_custom_bitlink (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomBitlinkAsync($custom_bitlink, $update_custom_bitlink)
    {
        return $this->updateCustomBitlinkAsyncWithHttpInfo($custom_bitlink, $update_custom_bitlink)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomBitlinkAsyncWithHttpInfo
     *
     * Update Custom Bitlink
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  \Bitly\Model\UpdateCustomBitlink $update_custom_bitlink (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomBitlinkAsyncWithHttpInfo($custom_bitlink, $update_custom_bitlink)
    {
        $returnType = '\Bitly\Model\CustomBitlink';
        $request = $this->updateCustomBitlinkRequest($custom_bitlink, $update_custom_bitlink);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomBitlink'
     *
     * @param  string $custom_bitlink A Custom Bitlink made of the domain and keyword (required)
     * @param  \Bitly\Model\UpdateCustomBitlink $update_custom_bitlink (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomBitlinkRequest($custom_bitlink, $update_custom_bitlink)
    {
        // verify the required parameter 'custom_bitlink' is set
        if ($custom_bitlink === null || (is_array($custom_bitlink) && count($custom_bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_bitlink when calling updateCustomBitlink'
            );
        }
        // verify the required parameter 'update_custom_bitlink' is set
        if ($update_custom_bitlink === null || (is_array($update_custom_bitlink) && count($update_custom_bitlink) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_custom_bitlink when calling updateCustomBitlink'
            );
        }

        $resourcePath = '/custom_bitlinks/{custom_bitlink}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($custom_bitlink !== null) {
            $resourcePath = str_replace(
                '{' . 'custom_bitlink' . '}',
                ObjectSerializer::toPathValue($custom_bitlink),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_custom_bitlink)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_custom_bitlink));
            } else {
                $httpBody = $update_custom_bitlink;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
