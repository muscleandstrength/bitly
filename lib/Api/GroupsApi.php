<?php
/**
 * GroupsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Bitly
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitly API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@bitly.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitly\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bitly\ApiException;
use Bitly\Configuration;
use Bitly\HeaderSelector;
use Bitly\ObjectSerializer;

/**
 * GroupsApi Class Doc Comment
 *
 * @category Class
 * @package  Bitly
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getGroup
     *
     * Retrieve a Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\Group|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getGroup($group_guid)
    {
        list($response) = $this->getGroupWithHttpInfo($group_guid);
        return $response;
    }

    /**
     * Operation getGroupWithHttpInfo
     *
     * Retrieve a Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\Group|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupWithHttpInfo($group_guid)
    {
        $request = $this->getGroupRequest($group_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\Group' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Group', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\Group';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Group',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupAsync
     *
     * Retrieve a Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupAsync($group_guid)
    {
        return $this->getGroupAsyncWithHttpInfo($group_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupAsyncWithHttpInfo
     *
     * Retrieve a Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupAsyncWithHttpInfo($group_guid)
    {
        $returnType = '\Bitly\Model\Group';
        $request = $this->getGroupRequest($group_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroup'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupRequest($group_guid)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getGroup'
            );
        }

        $resourcePath = '/groups/{group_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupClicks
     *
     * Get clicks by group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\GroupClicks
     */
    public function getGroupClicks($group_guid, $unit, $units, $unit_reference = null)
    {
        list($response) = $this->getGroupClicksWithHttpInfo($group_guid, $unit, $units, $unit_reference);
        return $response;
    }

    /**
     * Operation getGroupClicksWithHttpInfo
     *
     * Get clicks by group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\GroupClicks, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupClicksWithHttpInfo($group_guid, $unit, $units, $unit_reference = null)
    {
        $request = $this->getGroupClicksRequest($group_guid, $unit, $units, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\GroupClicks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\GroupClicks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\GroupClicks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\GroupClicks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupClicksAsync
     *
     * Get clicks by group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupClicksAsync($group_guid, $unit, $units, $unit_reference = null)
    {
        return $this->getGroupClicksAsyncWithHttpInfo($group_guid, $unit, $units, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupClicksAsyncWithHttpInfo
     *
     * Get clicks by group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupClicksAsyncWithHttpInfo($group_guid, $unit, $units, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\GroupClicks';
        $request = $this->getGroupClicksRequest($group_guid, $unit, $units, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupClicks'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupClicksRequest($group_guid, $unit, $units, $unit_reference = null)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getGroupClicks'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getGroupClicks'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getGroupClicks'
            );
        }

        $resourcePath = '/groups/{group_guid}/clicks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupMetricsByCities
     *
     * Get Click Metrics for a Group by City
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\CityMetrics|\Bitly\Model\NotFound
     */
    public function getGroupMetricsByCities($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        list($response) = $this->getGroupMetricsByCitiesWithHttpInfo($group_guid, $unit, $units, $size, $unit_reference);
        return $response;
    }

    /**
     * Operation getGroupMetricsByCitiesWithHttpInfo
     *
     * Get Click Metrics for a Group by City
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\CityMetrics|\Bitly\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupMetricsByCitiesWithHttpInfo($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        $request = $this->getGroupMetricsByCitiesRequest($group_guid, $unit, $units, $size, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\CityMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\CityMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\CityMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\CityMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupMetricsByCitiesAsync
     *
     * Get Click Metrics for a Group by City
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupMetricsByCitiesAsync($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        return $this->getGroupMetricsByCitiesAsyncWithHttpInfo($group_guid, $unit, $units, $size, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupMetricsByCitiesAsyncWithHttpInfo
     *
     * Get Click Metrics for a Group by City
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupMetricsByCitiesAsyncWithHttpInfo($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\CityMetrics';
        $request = $this->getGroupMetricsByCitiesRequest($group_guid, $unit, $units, $size, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupMetricsByCities'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupMetricsByCitiesRequest($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getGroupMetricsByCities'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getGroupMetricsByCities'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getGroupMetricsByCities'
            );
        }

        $resourcePath = '/groups/{group_guid}/cities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupMetricsByCountries
     *
     * Get Click Metrics for a Group by Country
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\ClickMetrics|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getGroupMetricsByCountries($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        list($response) = $this->getGroupMetricsByCountriesWithHttpInfo($group_guid, $unit, $units, $size, $unit_reference);
        return $response;
    }

    /**
     * Operation getGroupMetricsByCountriesWithHttpInfo
     *
     * Get Click Metrics for a Group by Country
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\ClickMetrics|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupMetricsByCountriesWithHttpInfo($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        $request = $this->getGroupMetricsByCountriesRequest($group_guid, $unit, $units, $size, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\ClickMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ClickMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\ClickMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ClickMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupMetricsByCountriesAsync
     *
     * Get Click Metrics for a Group by Country
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupMetricsByCountriesAsync($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        return $this->getGroupMetricsByCountriesAsyncWithHttpInfo($group_guid, $unit, $units, $size, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupMetricsByCountriesAsyncWithHttpInfo
     *
     * Get Click Metrics for a Group by Country
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupMetricsByCountriesAsyncWithHttpInfo($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\ClickMetrics';
        $request = $this->getGroupMetricsByCountriesRequest($group_guid, $unit, $units, $size, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupMetricsByCountries'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupMetricsByCountriesRequest($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getGroupMetricsByCountries'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getGroupMetricsByCountries'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getGroupMetricsByCountries'
            );
        }

        $resourcePath = '/groups/{group_guid}/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupMetricsByDevices
     *
     * Get Click Metrics for a Group by Device Type
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\DeviceMetrics|\Bitly\Model\NotFound
     */
    public function getGroupMetricsByDevices($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        list($response) = $this->getGroupMetricsByDevicesWithHttpInfo($group_guid, $unit, $units, $size, $unit_reference);
        return $response;
    }

    /**
     * Operation getGroupMetricsByDevicesWithHttpInfo
     *
     * Get Click Metrics for a Group by Device Type
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\UpgradeRequired|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\DeviceMetrics|\Bitly\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupMetricsByDevicesWithHttpInfo($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        $request = $this->getGroupMetricsByDevicesRequest($group_guid, $unit, $units, $size, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 402:
                    if ('\Bitly\Model\UpgradeRequired' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UpgradeRequired', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\DeviceMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\DeviceMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\DeviceMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UpgradeRequired',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\DeviceMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupMetricsByDevicesAsync
     *
     * Get Click Metrics for a Group by Device Type
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupMetricsByDevicesAsync($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        return $this->getGroupMetricsByDevicesAsyncWithHttpInfo($group_guid, $unit, $units, $size, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupMetricsByDevicesAsyncWithHttpInfo
     *
     * Get Click Metrics for a Group by Device Type
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupMetricsByDevicesAsyncWithHttpInfo($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\DeviceMetrics';
        $request = $this->getGroupMetricsByDevicesRequest($group_guid, $unit, $units, $size, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupMetricsByDevices'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  int $size The quantity of items to be be returned (optional, default to 50)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupMetricsByDevicesRequest($group_guid, $unit, $units, $size = 50, $unit_reference = null)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getGroupMetricsByDevices'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getGroupMetricsByDevices'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getGroupMetricsByDevices'
            );
        }

        $resourcePath = '/groups/{group_guid}/devices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupMetricsByReferringNetworks
     *
     * Get Click Metrics for a Group by Referring Networks
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\ClickMetrics|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getGroupMetricsByReferringNetworks($group_guid)
    {
        list($response) = $this->getGroupMetricsByReferringNetworksWithHttpInfo($group_guid);
        return $response;
    }

    /**
     * Operation getGroupMetricsByReferringNetworksWithHttpInfo
     *
     * Get Click Metrics for a Group by Referring Networks
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\ClickMetrics|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupMetricsByReferringNetworksWithHttpInfo($group_guid)
    {
        $request = $this->getGroupMetricsByReferringNetworksRequest($group_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\ClickMetrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\ClickMetrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\ClickMetrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\ClickMetrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupMetricsByReferringNetworksAsync
     *
     * Get Click Metrics for a Group by Referring Networks
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupMetricsByReferringNetworksAsync($group_guid)
    {
        return $this->getGroupMetricsByReferringNetworksAsyncWithHttpInfo($group_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupMetricsByReferringNetworksAsyncWithHttpInfo
     *
     * Get Click Metrics for a Group by Referring Networks
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupMetricsByReferringNetworksAsyncWithHttpInfo($group_guid)
    {
        $returnType = '\Bitly\Model\ClickMetrics';
        $request = $this->getGroupMetricsByReferringNetworksRequest($group_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupMetricsByReferringNetworks'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupMetricsByReferringNetworksRequest($group_guid)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getGroupMetricsByReferringNetworks'
            );
        }

        $resourcePath = '/groups/{group_guid}/referring_networks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupPreferences
     *
     * Retrieve Group Preferences
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\GroupPreferences|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getGroupPreferences($group_guid)
    {
        list($response) = $this->getGroupPreferencesWithHttpInfo($group_guid);
        return $response;
    }

    /**
     * Operation getGroupPreferencesWithHttpInfo
     *
     * Retrieve Group Preferences
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\GroupPreferences|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupPreferencesWithHttpInfo($group_guid)
    {
        $request = $this->getGroupPreferencesRequest($group_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\GroupPreferences' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\GroupPreferences', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\GroupPreferences';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\GroupPreferences',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupPreferencesAsync
     *
     * Retrieve Group Preferences
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupPreferencesAsync($group_guid)
    {
        return $this->getGroupPreferencesAsyncWithHttpInfo($group_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupPreferencesAsyncWithHttpInfo
     *
     * Retrieve Group Preferences
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupPreferencesAsyncWithHttpInfo($group_guid)
    {
        $returnType = '\Bitly\Model\GroupPreferences';
        $request = $this->getGroupPreferencesRequest($group_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupPreferences'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupPreferencesRequest($group_guid)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getGroupPreferences'
            );
        }

        $resourcePath = '/groups/{group_guid}/preferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupShortenCounts
     *
     * Retrieve Group Shorten Counts
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\Metrics|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getGroupShortenCounts($group_guid, $unit, $units, $unit_reference = null)
    {
        list($response) = $this->getGroupShortenCountsWithHttpInfo($group_guid, $unit, $units, $unit_reference);
        return $response;
    }

    /**
     * Operation getGroupShortenCountsWithHttpInfo
     *
     * Retrieve Group Shorten Counts
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\Metrics|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupShortenCountsWithHttpInfo($group_guid, $unit, $units, $unit_reference = null)
    {
        $request = $this->getGroupShortenCountsRequest($group_guid, $unit, $units, $unit_reference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\Metrics' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Metrics', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\Metrics';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Metrics',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupShortenCountsAsync
     *
     * Retrieve Group Shorten Counts
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupShortenCountsAsync($group_guid, $unit, $units, $unit_reference = null)
    {
        return $this->getGroupShortenCountsAsyncWithHttpInfo($group_guid, $unit, $units, $unit_reference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupShortenCountsAsyncWithHttpInfo
     *
     * Retrieve Group Shorten Counts
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupShortenCountsAsyncWithHttpInfo($group_guid, $unit, $units, $unit_reference = null)
    {
        $returnType = '\Bitly\Model\Metrics';
        $request = $this->getGroupShortenCountsRequest($group_guid, $unit, $units, $unit_reference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupShortenCounts'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  string $unit A unit of time (required)
     * @param  int $units An integer representing the time units to query data for. pass -1 to return all units of time. (required)
     * @param  string $unit_reference An ISO-8601 timestamp, indicating the most recent time for which to pull metrics. Will default to current time. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupShortenCountsRequest($group_guid, $unit, $units, $unit_reference = null)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getGroupShortenCounts'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling getGroupShortenCounts'
            );
        }
        // verify the required parameter 'units' is set
        if ($units === null || (is_array($units) && count($units) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $units when calling getGroupShortenCounts'
            );
        }

        $resourcePath = '/groups/{group_guid}/shorten_counts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($unit !== null) {
            if('form' === 'form' && is_array($unit)) {
                foreach($unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit'] = $unit;
            }
        }
        // query params
        if ($units !== null) {
            if('form' === 'form' && is_array($units)) {
                foreach($units as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['units'] = $units;
            }
        }
        // query params
        if ($unit_reference !== null) {
            if('form' === 'form' && is_array($unit_reference)) {
                foreach($unit_reference as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unit_reference'] = $unit_reference;
            }
        }


        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroupTags
     *
     * Retrieve Tags by Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\Tags|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable
     */
    public function getGroupTags($group_guid)
    {
        list($response) = $this->getGroupTagsWithHttpInfo($group_guid);
        return $response;
    }

    /**
     * Operation getGroupTagsWithHttpInfo
     *
     * Retrieve Tags by Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\Tags|\Bitly\Model\NotFound|\Bitly\Model\Forbidden|\Bitly\Model\InternalError|\Bitly\Model\TemporarilyUnavailable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupTagsWithHttpInfo($group_guid)
    {
        $request = $this->getGroupTagsRequest($group_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitly\Model\Tags' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Tags', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\Tags';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Tags',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupTagsAsync
     *
     * Retrieve Tags by Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupTagsAsync($group_guid)
    {
        return $this->getGroupTagsAsyncWithHttpInfo($group_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupTagsAsyncWithHttpInfo
     *
     * Retrieve Tags by Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupTagsAsyncWithHttpInfo($group_guid)
    {
        $returnType = '\Bitly\Model\Tags';
        $request = $this->getGroupTagsRequest($group_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroupTags'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupTagsRequest($group_guid)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling getGroupTags'
            );
        }

        $resourcePath = '/groups/{group_guid}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroups
     *
     * Retrieve Groups
     *
     * @param  string $organization_guid A GUID for a Bitly organization (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\UnprocessableEntity|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\Groups|\Bitly\Model\InternalError
     */
    public function getGroups($organization_guid = null)
    {
        list($response) = $this->getGroupsWithHttpInfo($organization_guid);
        return $response;
    }

    /**
     * Operation getGroupsWithHttpInfo
     *
     * Retrieve Groups
     *
     * @param  string $organization_guid A GUID for a Bitly organization (optional)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\UnprocessableEntity|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\Groups|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupsWithHttpInfo($organization_guid = null)
    {
        $request = $this->getGroupsRequest($organization_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Bitly\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\Groups' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Groups', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\Groups';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Groups',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupsAsync
     *
     * Retrieve Groups
     *
     * @param  string $organization_guid A GUID for a Bitly organization (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupsAsync($organization_guid = null)
    {
        return $this->getGroupsAsyncWithHttpInfo($organization_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGroupsAsyncWithHttpInfo
     *
     * Retrieve Groups
     *
     * @param  string $organization_guid A GUID for a Bitly organization (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupsAsyncWithHttpInfo($organization_guid = null)
    {
        $returnType = '\Bitly\Model\Groups';
        $request = $this->getGroupsRequest($organization_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroups'
     *
     * @param  string $organization_guid A GUID for a Bitly organization (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupsRequest($organization_guid = null)
    {

        $resourcePath = '/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($organization_guid !== null) {
            if('form' === 'form' && is_array($organization_guid)) {
                foreach($organization_guid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['organization_guid'] = $organization_guid;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGroup
     *
     * Update a Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\GroupUpdate $group_update group_update (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\UnprocessableEntity|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\Group|\Bitly\Model\InternalError
     */
    public function updateGroup($group_guid, $group_update)
    {
        list($response) = $this->updateGroupWithHttpInfo($group_guid, $group_update);
        return $response;
    }

    /**
     * Operation updateGroupWithHttpInfo
     *
     * Update a Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\GroupUpdate $group_update (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\UnprocessableEntity|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\Group|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGroupWithHttpInfo($group_guid, $group_update)
    {
        $request = $this->updateGroupRequest($group_guid, $group_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Bitly\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\Group' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Group', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\Group';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Group',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGroupAsync
     *
     * Update a Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\GroupUpdate $group_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupAsync($group_guid, $group_update)
    {
        return $this->updateGroupAsyncWithHttpInfo($group_guid, $group_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGroupAsyncWithHttpInfo
     *
     * Update a Group
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\GroupUpdate $group_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupAsyncWithHttpInfo($group_guid, $group_update)
    {
        $returnType = '\Bitly\Model\Group';
        $request = $this->updateGroupRequest($group_guid, $group_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGroup'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\GroupUpdate $group_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateGroupRequest($group_guid, $group_update)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling updateGroup'
            );
        }
        // verify the required parameter 'group_update' is set
        if ($group_update === null || (is_array($group_update) && count($group_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_update when calling updateGroup'
            );
        }

        $resourcePath = '/groups/{group_guid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($group_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($group_update));
            } else {
                $httpBody = $group_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGroupPreferences
     *
     * Update Group Preferences
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\GroupPreferences $group_preferences group_preferences (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\UnprocessableEntity|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\GroupPreferences|\Bitly\Model\InternalError
     */
    public function updateGroupPreferences($group_guid, $group_preferences)
    {
        list($response) = $this->updateGroupPreferencesWithHttpInfo($group_guid, $group_preferences);
        return $response;
    }

    /**
     * Operation updateGroupPreferencesWithHttpInfo
     *
     * Update Group Preferences
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\GroupPreferences $group_preferences (required)
     *
     * @throws \Bitly\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitly\Model\BadRequest|\Bitly\Model\Forbidden|\Bitly\Model\NotFound|\Bitly\Model\UnprocessableEntity|\Bitly\Model\TemporarilyUnavailable|\Bitly\Model\GroupPreferences|\Bitly\Model\InternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGroupPreferencesWithHttpInfo($group_guid, $group_preferences)
    {
        $request = $this->updateGroupPreferencesRequest($group_guid, $group_preferences);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Bitly\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitly\Model\Forbidden' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\Forbidden', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitly\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Bitly\Model\UnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\UnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Bitly\Model\TemporarilyUnavailable' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\TemporarilyUnavailable', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Bitly\Model\GroupPreferences' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\GroupPreferences', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitly\Model\InternalError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitly\Model\InternalError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitly\Model\GroupPreferences';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\UnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\TemporarilyUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\GroupPreferences',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitly\Model\InternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGroupPreferencesAsync
     *
     * Update Group Preferences
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\GroupPreferences $group_preferences (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupPreferencesAsync($group_guid, $group_preferences)
    {
        return $this->updateGroupPreferencesAsyncWithHttpInfo($group_guid, $group_preferences)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGroupPreferencesAsyncWithHttpInfo
     *
     * Update Group Preferences
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\GroupPreferences $group_preferences (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupPreferencesAsyncWithHttpInfo($group_guid, $group_preferences)
    {
        $returnType = '\Bitly\Model\GroupPreferences';
        $request = $this->updateGroupPreferencesRequest($group_guid, $group_preferences);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGroupPreferences'
     *
     * @param  string $group_guid A GUID for a Bitly group (required)
     * @param  \Bitly\Model\GroupPreferences $group_preferences (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateGroupPreferencesRequest($group_guid, $group_preferences)
    {
        // verify the required parameter 'group_guid' is set
        if ($group_guid === null || (is_array($group_guid) && count($group_guid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_guid when calling updateGroupPreferences'
            );
        }
        // verify the required parameter 'group_preferences' is set
        if ($group_preferences === null || (is_array($group_preferences) && count($group_preferences) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_preferences when calling updateGroupPreferences'
            );
        }

        $resourcePath = '/groups/{group_guid}/preferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_guid !== null) {
            $resourcePath = str_replace(
                '{' . 'group_guid' . '}',
                ObjectSerializer::toPathValue($group_guid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($group_preferences)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($group_preferences));
            } else {
                $httpBody = $group_preferences;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
