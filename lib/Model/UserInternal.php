<?php
/**
 * UserInternal
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitly API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@bitly.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserInternal Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UserInternal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserInternal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_group_guid' => 'string',
        'name' => 'string',
        'created' => 'string',
        'is_active' => 'bool',
        'modified' => 'string',
        'is_sso_user' => 'bool',
        'is_2fa_enabled' => 'bool',
        'login' => 'string',
        'emails' => '\OpenAPI\Client\Model\Email[]',
        'role_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_group_guid' => null,
        'name' => null,
        'created' => null,
        'is_active' => null,
        'modified' => null,
        'is_sso_user' => null,
        'is_2fa_enabled' => null,
        'login' => null,
        'emails' => null,
        'role_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_group_guid' => 'default_group_guid',
        'name' => 'name',
        'created' => 'created',
        'is_active' => 'is_active',
        'modified' => 'modified',
        'is_sso_user' => 'is_sso_user',
        'is_2fa_enabled' => 'is_2fa_enabled',
        'login' => 'login',
        'emails' => 'emails',
        'role_name' => 'role_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_group_guid' => 'setDefaultGroupGuid',
        'name' => 'setName',
        'created' => 'setCreated',
        'is_active' => 'setIsActive',
        'modified' => 'setModified',
        'is_sso_user' => 'setIsSsoUser',
        'is_2fa_enabled' => 'setIs2faEnabled',
        'login' => 'setLogin',
        'emails' => 'setEmails',
        'role_name' => 'setRoleName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_group_guid' => 'getDefaultGroupGuid',
        'name' => 'getName',
        'created' => 'getCreated',
        'is_active' => 'getIsActive',
        'modified' => 'getModified',
        'is_sso_user' => 'getIsSsoUser',
        'is_2fa_enabled' => 'getIs2faEnabled',
        'login' => 'getLogin',
        'emails' => 'getEmails',
        'role_name' => 'getRoleName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_group_guid'] = $data['default_group_guid'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? null;
        $this->container['modified'] = $data['modified'] ?? null;
        $this->container['is_sso_user'] = $data['is_sso_user'] ?? null;
        $this->container['is_2fa_enabled'] = $data['is_2fa_enabled'] ?? null;
        $this->container['login'] = $data['login'] ?? null;
        $this->container['emails'] = $data['emails'] ?? null;
        $this->container['role_name'] = $data['role_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        if ($this->container['is_sso_user'] === null) {
            $invalidProperties[] = "'is_sso_user' can't be null";
        }
        if ($this->container['is_2fa_enabled'] === null) {
            $invalidProperties[] = "'is_2fa_enabled' can't be null";
        }
        if ($this->container['login'] === null) {
            $invalidProperties[] = "'login' can't be null";
        }
        if ($this->container['emails'] === null) {
            $invalidProperties[] = "'emails' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_group_guid
     *
     * @return string|null
     */
    public function getDefaultGroupGuid()
    {
        return $this->container['default_group_guid'];
    }

    /**
     * Sets default_group_guid
     *
     * @param string|null $default_group_guid default_group_guid
     *
     * @return self
     */
    public function setDefaultGroupGuid($default_group_guid)
    {
        $this->container['default_group_guid'] = $default_group_guid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return string
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param string $modified modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets is_sso_user
     *
     * @return bool
     */
    public function getIsSsoUser()
    {
        return $this->container['is_sso_user'];
    }

    /**
     * Sets is_sso_user
     *
     * @param bool $is_sso_user is_sso_user
     *
     * @return self
     */
    public function setIsSsoUser($is_sso_user)
    {
        $this->container['is_sso_user'] = $is_sso_user;

        return $this;
    }

    /**
     * Gets is_2fa_enabled
     *
     * @return bool
     */
    public function getIs2faEnabled()
    {
        return $this->container['is_2fa_enabled'];
    }

    /**
     * Sets is_2fa_enabled
     *
     * @param bool $is_2fa_enabled is_2fa_enabled
     *
     * @return self
     */
    public function setIs2faEnabled($is_2fa_enabled)
    {
        $this->container['is_2fa_enabled'] = $is_2fa_enabled;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string $login login
     *
     * @return self
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \OpenAPI\Client\Model\Email[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \OpenAPI\Client\Model\Email[] $emails emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets role_name
     *
     * @return string|null
     */
    public function getRoleName()
    {
        return $this->container['role_name'];
    }

    /**
     * Sets role_name
     *
     * @param string|null $role_name role_name
     *
     * @return self
     */
    public function setRoleName($role_name)
    {
        $this->container['role_name'] = $role_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


