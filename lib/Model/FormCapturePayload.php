<?php
/**
 * FormCapturePayload
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitly API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@bitly.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FormCapturePayload Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class FormCapturePayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FormCapturePayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'submit_text' => 'string',
        'name' => 'string',
        'response_status' => 'string',
        'pages' => '\OpenAPI\Client\Model\FormPage[]',
        'version' => 'string',
        'group_guid' => 'string',
        'login' => 'string',
        'skip_text' => 'string',
        'org_guid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'submit_text' => null,
        'name' => null,
        'response_status' => null,
        'pages' => null,
        'version' => null,
        'group_guid' => null,
        'login' => null,
        'skip_text' => null,
        'org_guid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'submit_text' => 'submit_text',
        'name' => 'name',
        'response_status' => 'response_status',
        'pages' => 'pages',
        'version' => 'version',
        'group_guid' => 'group_guid',
        'login' => 'login',
        'skip_text' => 'skip_text',
        'org_guid' => 'org_guid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'submit_text' => 'setSubmitText',
        'name' => 'setName',
        'response_status' => 'setResponseStatus',
        'pages' => 'setPages',
        'version' => 'setVersion',
        'group_guid' => 'setGroupGuid',
        'login' => 'setLogin',
        'skip_text' => 'setSkipText',
        'org_guid' => 'setOrgGuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'submit_text' => 'getSubmitText',
        'name' => 'getName',
        'response_status' => 'getResponseStatus',
        'pages' => 'getPages',
        'version' => 'getVersion',
        'group_guid' => 'getGroupGuid',
        'login' => 'getLogin',
        'skip_text' => 'getSkipText',
        'org_guid' => 'getOrgGuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['submit_text'] = $data['submit_text'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['response_status'] = $data['response_status'] ?? null;
        $this->container['pages'] = $data['pages'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['group_guid'] = $data['group_guid'] ?? null;
        $this->container['login'] = $data['login'] ?? null;
        $this->container['skip_text'] = $data['skip_text'] ?? null;
        $this->container['org_guid'] = $data['org_guid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets submit_text
     *
     * @return string|null
     */
    public function getSubmitText()
    {
        return $this->container['submit_text'];
    }

    /**
     * Sets submit_text
     *
     * @param string|null $submit_text submit_text
     *
     * @return self
     */
    public function setSubmitText($submit_text)
    {
        $this->container['submit_text'] = $submit_text;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets response_status
     *
     * @return string|null
     */
    public function getResponseStatus()
    {
        return $this->container['response_status'];
    }

    /**
     * Sets response_status
     *
     * @param string|null $response_status response_status
     *
     * @return self
     */
    public function setResponseStatus($response_status)
    {
        $this->container['response_status'] = $response_status;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return \OpenAPI\Client\Model\FormPage[]|null
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param \OpenAPI\Client\Model\FormPage[]|null $pages pages
     *
     * @return self
     */
    public function setPages($pages)
    {
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets group_guid
     *
     * @return string|null
     */
    public function getGroupGuid()
    {
        return $this->container['group_guid'];
    }

    /**
     * Sets group_guid
     *
     * @param string|null $group_guid group_guid
     *
     * @return self
     */
    public function setGroupGuid($group_guid)
    {
        $this->container['group_guid'] = $group_guid;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string|null
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string|null $login login
     *
     * @return self
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets skip_text
     *
     * @return string|null
     */
    public function getSkipText()
    {
        return $this->container['skip_text'];
    }

    /**
     * Sets skip_text
     *
     * @param string|null $skip_text skip_text
     *
     * @return self
     */
    public function setSkipText($skip_text)
    {
        $this->container['skip_text'] = $skip_text;

        return $this;
    }

    /**
     * Gets org_guid
     *
     * @return string|null
     */
    public function getOrgGuid()
    {
        return $this->container['org_guid'];
    }

    /**
     * Sets org_guid
     *
     * @param string|null $org_guid org_guid
     *
     * @return self
     */
    public function setOrgGuid($org_guid)
    {
        $this->container['org_guid'] = $org_guid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


