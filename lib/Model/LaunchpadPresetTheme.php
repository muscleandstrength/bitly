<?php
/**
 * LaunchpadPresetTheme
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitly API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@bitly.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LaunchpadPresetTheme Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LaunchpadPresetTheme implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LaunchpadPresetTheme';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'button_text_color' => 'string',
        'display_name' => 'string',
        'avatar_text_color' => 'string',
        'launchpad_text_color' => 'string',
        'is_active' => 'bool',
        'background' => 'string',
        'avatar_background' => 'string',
        'theme_id' => 'int',
        'button_background' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'button_text_color' => null,
        'display_name' => null,
        'avatar_text_color' => null,
        'launchpad_text_color' => null,
        'is_active' => null,
        'background' => null,
        'avatar_background' => null,
        'theme_id' => null,
        'button_background' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'button_text_color' => 'button_text_color',
        'display_name' => 'display_name',
        'avatar_text_color' => 'avatar_text_color',
        'launchpad_text_color' => 'launchpad_text_color',
        'is_active' => 'is_active',
        'background' => 'background',
        'avatar_background' => 'avatar_background',
        'theme_id' => 'theme_id',
        'button_background' => 'button_background'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'button_text_color' => 'setButtonTextColor',
        'display_name' => 'setDisplayName',
        'avatar_text_color' => 'setAvatarTextColor',
        'launchpad_text_color' => 'setLaunchpadTextColor',
        'is_active' => 'setIsActive',
        'background' => 'setBackground',
        'avatar_background' => 'setAvatarBackground',
        'theme_id' => 'setThemeId',
        'button_background' => 'setButtonBackground'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'button_text_color' => 'getButtonTextColor',
        'display_name' => 'getDisplayName',
        'avatar_text_color' => 'getAvatarTextColor',
        'launchpad_text_color' => 'getLaunchpadTextColor',
        'is_active' => 'getIsActive',
        'background' => 'getBackground',
        'avatar_background' => 'getAvatarBackground',
        'theme_id' => 'getThemeId',
        'button_background' => 'getButtonBackground'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['button_text_color'] = $data['button_text_color'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['avatar_text_color'] = $data['avatar_text_color'] ?? null;
        $this->container['launchpad_text_color'] = $data['launchpad_text_color'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? null;
        $this->container['background'] = $data['background'] ?? null;
        $this->container['avatar_background'] = $data['avatar_background'] ?? null;
        $this->container['theme_id'] = $data['theme_id'] ?? null;
        $this->container['button_background'] = $data['button_background'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets button_text_color
     *
     * @return string|null
     */
    public function getButtonTextColor()
    {
        return $this->container['button_text_color'];
    }

    /**
     * Sets button_text_color
     *
     * @param string|null $button_text_color button_text_color
     *
     * @return self
     */
    public function setButtonTextColor($button_text_color)
    {
        $this->container['button_text_color'] = $button_text_color;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets avatar_text_color
     *
     * @return string|null
     */
    public function getAvatarTextColor()
    {
        return $this->container['avatar_text_color'];
    }

    /**
     * Sets avatar_text_color
     *
     * @param string|null $avatar_text_color avatar_text_color
     *
     * @return self
     */
    public function setAvatarTextColor($avatar_text_color)
    {
        $this->container['avatar_text_color'] = $avatar_text_color;

        return $this;
    }

    /**
     * Gets launchpad_text_color
     *
     * @return string|null
     */
    public function getLaunchpadTextColor()
    {
        return $this->container['launchpad_text_color'];
    }

    /**
     * Sets launchpad_text_color
     *
     * @param string|null $launchpad_text_color launchpad_text_color
     *
     * @return self
     */
    public function setLaunchpadTextColor($launchpad_text_color)
    {
        $this->container['launchpad_text_color'] = $launchpad_text_color;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets background
     *
     * @return string|null
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param string|null $background background
     *
     * @return self
     */
    public function setBackground($background)
    {
        $this->container['background'] = $background;

        return $this;
    }

    /**
     * Gets avatar_background
     *
     * @return string|null
     */
    public function getAvatarBackground()
    {
        return $this->container['avatar_background'];
    }

    /**
     * Sets avatar_background
     *
     * @param string|null $avatar_background avatar_background
     *
     * @return self
     */
    public function setAvatarBackground($avatar_background)
    {
        $this->container['avatar_background'] = $avatar_background;

        return $this;
    }

    /**
     * Gets theme_id
     *
     * @return int|null
     */
    public function getThemeId()
    {
        return $this->container['theme_id'];
    }

    /**
     * Sets theme_id
     *
     * @param int|null $theme_id theme_id
     *
     * @return self
     */
    public function setThemeId($theme_id)
    {
        $this->container['theme_id'] = $theme_id;

        return $this;
    }

    /**
     * Gets button_background
     *
     * @return string|null
     */
    public function getButtonBackground()
    {
        return $this->container['button_background'];
    }

    /**
     * Sets button_background
     *
     * @param string|null $button_background button_background
     *
     * @return self
     */
    public function setButtonBackground($button_background)
    {
        $this->container['button_background'] = $button_background;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


