<?php
/**
 * CampaignChannelClicks
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitly API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@bitly.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CampaignChannelClicks Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CampaignChannelClicks implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CampaignChannelClicks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_ts' => 'int',
        'channel_guid' => 'string',
        'total_clicks' => 'int',
        'channel_name' => 'string',
        'campaign_guid' => 'string',
        'channel_bitlinks' => '\OpenAPI\Client\Model\ChannelBitlinks',
        'clicks' => '\OpenAPI\Client\Model\CampaignClickData[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_ts' => null,
        'channel_guid' => null,
        'total_clicks' => null,
        'channel_name' => null,
        'campaign_guid' => null,
        'channel_bitlinks' => null,
        'clicks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_ts' => 'created_ts',
        'channel_guid' => 'channel_guid',
        'total_clicks' => 'total_clicks',
        'channel_name' => 'channel_name',
        'campaign_guid' => 'campaign_guid',
        'channel_bitlinks' => 'channel_bitlinks',
        'clicks' => 'clicks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_ts' => 'setCreatedTs',
        'channel_guid' => 'setChannelGuid',
        'total_clicks' => 'setTotalClicks',
        'channel_name' => 'setChannelName',
        'campaign_guid' => 'setCampaignGuid',
        'channel_bitlinks' => 'setChannelBitlinks',
        'clicks' => 'setClicks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_ts' => 'getCreatedTs',
        'channel_guid' => 'getChannelGuid',
        'total_clicks' => 'getTotalClicks',
        'channel_name' => 'getChannelName',
        'campaign_guid' => 'getCampaignGuid',
        'channel_bitlinks' => 'getChannelBitlinks',
        'clicks' => 'getClicks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_ts'] = $data['created_ts'] ?? null;
        $this->container['channel_guid'] = $data['channel_guid'] ?? null;
        $this->container['total_clicks'] = $data['total_clicks'] ?? null;
        $this->container['channel_name'] = $data['channel_name'] ?? null;
        $this->container['campaign_guid'] = $data['campaign_guid'] ?? null;
        $this->container['channel_bitlinks'] = $data['channel_bitlinks'] ?? null;
        $this->container['clicks'] = $data['clicks'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_ts
     *
     * @return int|null
     */
    public function getCreatedTs()
    {
        return $this->container['created_ts'];
    }

    /**
     * Sets created_ts
     *
     * @param int|null $created_ts created_ts
     *
     * @return self
     */
    public function setCreatedTs($created_ts)
    {
        $this->container['created_ts'] = $created_ts;

        return $this;
    }

    /**
     * Gets channel_guid
     *
     * @return string|null
     */
    public function getChannelGuid()
    {
        return $this->container['channel_guid'];
    }

    /**
     * Sets channel_guid
     *
     * @param string|null $channel_guid channel_guid
     *
     * @return self
     */
    public function setChannelGuid($channel_guid)
    {
        $this->container['channel_guid'] = $channel_guid;

        return $this;
    }

    /**
     * Gets total_clicks
     *
     * @return int|null
     */
    public function getTotalClicks()
    {
        return $this->container['total_clicks'];
    }

    /**
     * Sets total_clicks
     *
     * @param int|null $total_clicks total_clicks
     *
     * @return self
     */
    public function setTotalClicks($total_clicks)
    {
        $this->container['total_clicks'] = $total_clicks;

        return $this;
    }

    /**
     * Gets channel_name
     *
     * @return string|null
     */
    public function getChannelName()
    {
        return $this->container['channel_name'];
    }

    /**
     * Sets channel_name
     *
     * @param string|null $channel_name channel_name
     *
     * @return self
     */
    public function setChannelName($channel_name)
    {
        $this->container['channel_name'] = $channel_name;

        return $this;
    }

    /**
     * Gets campaign_guid
     *
     * @return string|null
     */
    public function getCampaignGuid()
    {
        return $this->container['campaign_guid'];
    }

    /**
     * Sets campaign_guid
     *
     * @param string|null $campaign_guid campaign_guid
     *
     * @return self
     */
    public function setCampaignGuid($campaign_guid)
    {
        $this->container['campaign_guid'] = $campaign_guid;

        return $this;
    }

    /**
     * Gets channel_bitlinks
     *
     * @return \OpenAPI\Client\Model\ChannelBitlinks|null
     */
    public function getChannelBitlinks()
    {
        return $this->container['channel_bitlinks'];
    }

    /**
     * Sets channel_bitlinks
     *
     * @param \OpenAPI\Client\Model\ChannelBitlinks|null $channel_bitlinks channel_bitlinks
     *
     * @return self
     */
    public function setChannelBitlinks($channel_bitlinks)
    {
        $this->container['channel_bitlinks'] = $channel_bitlinks;

        return $this;
    }

    /**
     * Gets clicks
     *
     * @return \OpenAPI\Client\Model\CampaignClickData[]|null
     */
    public function getClicks()
    {
        return $this->container['clicks'];
    }

    /**
     * Sets clicks
     *
     * @param \OpenAPI\Client\Model\CampaignClickData[]|null $clicks clicks
     *
     * @return self
     */
    public function setClicks($clicks)
    {
        $this->container['clicks'] = $clicks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


